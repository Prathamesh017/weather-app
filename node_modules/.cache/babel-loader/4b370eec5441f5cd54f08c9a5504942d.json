{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pt\\\\Desktop\\\\React\\\\Pratice\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from 'react';\nimport Login from './components/Login/Login';\nimport Home from './components/Home/Home';\nimport MainHeader from './components/MainHeader/MainHeader';\nimport Auth from \"./Auth\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem(\"loggedIn\", \"1\");\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"loggedIn\");\n    setIsLoggedIn(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Auth.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      a: \"pt\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(MainHeader, {\n      isAuthenticated: isLoggedIn,\n      onLogout: logoutHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [!isLoggedIn && /*#__PURE__*/_jsxDEV(Login, {\n        onLogin: loginHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 25\n      }, this), isLoggedIn && /*#__PURE__*/_jsxDEV(Home, {\n        onLogout: logoutHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"g0MSgNVZk+vKiEFnDJ9VPEfswFA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/pt/Desktop/React/Pratice/src/App.js"],"names":["React","createContext","useEffect","useState","Login","Home","MainHeader","Auth","App","isLoggedIn","setIsLoggedIn","loginHandler","email","password","localStorage","setItem","logoutHandler","removeItem","a"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,EAA0CC,QAA1C,QAA0D,OAA1D;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAQC,IAAR,MAAkB,QAAlB;;;AAIA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,KAAD,CAA5C;;AAIA,QAAMQ,YAAY,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACxC;AACA;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAgC,GAAhC;AACAL,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD,GALD;;AAOA,QAAMM,aAAa,GAAG,MAAM;AAC1BF,IAAAA,YAAY,CAACG,UAAb,CAAwB,UAAxB;AACAP,IAAAA,aAAa,CAAC,KAAD,CAAb;AACD,GAHD;;AAKA,sBACE,QAAC,IAAD,CAAM,QAAN;AAAe,IAAA,KAAK,EAAE;AACpBD,MAAAA,UAAU,EAACA,UADS;AAEpBS,MAAAA,CAAC,EAAC;AAFkB,KAAtB;AAAA,4BAME,QAAC,UAAD;AAAY,MAAA,eAAe,EAAET,UAA7B;AAAyC,MAAA,QAAQ,EAAEO;AAAnD;AAAA;AAAA;AAAA;AAAA,YANF,eAOE;AAAA,iBACG,CAACP,UAAD,iBAAe,QAAC,KAAD;AAAO,QAAA,OAAO,EAAEE;AAAhB;AAAA;AAAA;AAAA;AAAA,cADlB,EAEGF,UAAU,iBAAI,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAEO;AAAhB;AAAA;AAAA;AAAA;AAAA,cAFjB;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;GA/BQR,G;;KAAAA,G;AAiCT,eAAeA,GAAf","sourcesContent":["import React, { createContext, useEffect, useState } from 'react';\n\nimport Login from './components/Login/Login';\nimport Home from './components/Home/Home';\nimport MainHeader from './components/MainHeader/MainHeader';\nimport  Auth from \"./Auth\";\n\n\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n \n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem(\"loggedIn\",\"1\");\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"loggedIn\");\n    setIsLoggedIn(false);\n  };\n\n  return (\n    <Auth.Provider value={{\n      isLoggedIn:isLoggedIn,\n      a:\"pt\"\n    }\n    \n    }>\n      <MainHeader isAuthenticated={isLoggedIn} onLogout={logoutHandler} />\n      <main>\n        {!isLoggedIn && <Login onLogin={loginHandler} />}\n        {isLoggedIn && <Home onLogout={logoutHandler} />}\n      </main>\n    </Auth.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}