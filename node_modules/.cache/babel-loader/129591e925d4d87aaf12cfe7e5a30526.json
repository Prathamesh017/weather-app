{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pt\\\\Desktop\\\\React Projects\\\\Movie App\\\\src\\\\Components\\\\Show.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useReducer } from \"react\";\nimport { useParams } from \"react-router\";\nimport { apiGet } from \"./misc/Config\";\nimport Cast from \"./Shows/Cast\";\nimport Details from \"./Shows/Details\";\nimport Seasons from \"./Shows/Seasons\";\nimport ShowMainData from \"./Shows/ShowMainData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  show: null,\n  isLoading: true,\n  error: null\n};\n\nconst reducer = (state, action) => {\n  console.log(action);\n\n  switch (action.type) {\n    case 'FETCH_SUCCESS':\n      {\n        return { ...state,\n          show: action.show,\n          isLoading: false,\n          error: null\n        };\n      }\n\n    case 'FETCH_FAILED':\n      {\n        return { ...state,\n          error: action.error,\n          isLoading: false\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst Show = () => {\n  _s();\n\n  // let isMounted = true;\n  const {\n    id\n  } = useParams(); //id gives us the id that is in the url\n  // const [show, setShow] = useState();\n  // const [isLoading, setIsLoading] = useState(true);\n  // const [error, setError] = useState(\"\");\n\n  const [{\n    show,\n    isLoading,\n    error\n  }, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    let isMounted = true;\n    apiGet(`shows/${id}?embed[]=seasons&embed[]=cast`).then(results => {\n      if (isMounted) {\n        dispatch({\n          type: \"FETCH_SUCCESS\",\n          show: results\n        }); // setShow(results);\n        // setIsLoading(false);\n      }\n    }).catch(err => {\n      if (isMounted) {\n        dispatch({\n          type: \"FETCH_FAILED\",\n          error: err.message\n        }); // setError(err.message);  \n        // setIsLoading(false);\n      }\n    });\n    return () => {\n      isMounted = false;\n    }; //we use callback function to ensure that isMounted changes only after .then or .catch method is executed \n    // apiGet method \n  }, [id]);\n  console.log(show); // console.log(show._embedded)\n  // if(show){\n  //   return<div>{show.name}</div>\n  // }\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"the page is isLoading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"error occured \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ShowMainData //cant use show if isLoading  or error is not used prior to it \n      , {\n        image: show.image,\n        name: show.name,\n        rating: show.rating,\n        summary: show.summary,\n        tags: show.genres\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Details, {\n        status: show.status,\n        network: show.network,\n        premiered: show.premiered\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Seasons, {\n        seasons: show._embedded.seasons\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 8\n      }, this), console.log(show._embedded.seasons)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Cast, {\n        cast: show._embedded.cast\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Show, \"J6QAHZhvRd5+7ZhE8Dj2kvUBK3k=\", false, function () {\n  return [useParams];\n});\n\n_c = Show;\nexport default Show;\n\nvar _c;\n\n$RefreshReg$(_c, \"Show\");","map":{"version":3,"sources":["C:/Users/pt/Desktop/React Projects/Movie App/src/Components/Show.jsx"],"names":["React","useEffect","useReducer","useParams","apiGet","Cast","Details","Seasons","ShowMainData","initialState","show","isLoading","error","reducer","state","action","console","log","type","Show","id","dispatch","isMounted","then","results","catch","err","message","image","name","rating","summary","genres","status","network","premiered","_embedded","seasons","cast"],"mappings":"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","sourcesContent":["import React, { useEffect, useReducer } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { apiGet } from \"./misc/Config\";\r\nimport Cast from \"./Shows/Cast\";\r\nimport Details from \"./Shows/Details\";\r\nimport Seasons from \"./Shows/Seasons\";\r\nimport ShowMainData from \"./Shows/ShowMainData\";\r\n\r\nconst initialState={\r\n  show:null,\r\n  isLoading:true,\r\n  error:null\r\n}\r\n\r\nconst reducer=(state,action)=>{\r\n  console.log(action)\r\n    switch(action.type){\r\n      case 'FETCH_SUCCESS':{\r\n        return{ ...state,show:action.show,isLoading:false,error:null};\r\n        \r\n      }\r\n      case 'FETCH_FAILED':{\r\n        return{ ...state,error:action.error,isLoading:false}\r\n      }\r\n\r\n      default:\r\n        return state;\r\n       \r\n    }\r\n}\r\n\r\nconst Show = () => {\r\n  // let isMounted = true;\r\n  const { id } = useParams();\r\n  //id gives us the id that is in the url\r\n\r\n  // const [show, setShow] = useState();\r\n  // const [isLoading, setIsLoading] = useState(true);\r\n  // const [error, setError] = useState(\"\");\r\n\r\n  const[{show,isLoading,error},dispatch]=useReducer(reducer,initialState)\r\n\r\nuseEffect(()=>{\r\n    let isMounted=true;\r\n    apiGet(`shows/${id}?embed[]=seasons&embed[]=cast`)\r\n    .then((results) => {\r\n      if (isMounted) {\r\n\r\n        dispatch({type:\"FETCH_SUCCESS\",show:results})\r\n        // setShow(results);\r\n        // setIsLoading(false);\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      if (isMounted) {\r\n\r\n        dispatch({type:\"FETCH_FAILED\",error:err.message})\r\n        // setError(err.message);  \r\n        // setIsLoading(false);\r\n      }\r\n    });\r\n\r\n    return()=>{\r\n        isMounted=false;\r\n    }\r\n\r\n    //we use callback function to ensure that isMounted changes only after .then or .catch method is executed \r\n    // apiGet method \r\n},[id])\r\n  console.log(show)\r\n  // console.log(show._embedded)\r\n\r\n\r\n  // if(show){\r\n  //   return<div>{show.name}</div>\r\n  // }\r\n  if(isLoading){\r\n    return(<div>the page is isLoading</div>)\r\n  }\r\n\r\n  if(error){\r\n    return(<div>error occured {error}</div>)\r\n  }\r\n\r\n return(\r\n   <>\r\n     <div>\r\n       <ShowMainData\r\n         //cant use show if isLoading  or error is not used prior to it \r\n         image={show.image}\r\n         name={show.name}\r\n         rating={show.rating}\r\n         summary={show.summary}\r\n         tags={show.genres}\r\n         \r\n       />\r\n     </div>\r\n     <div>\r\n     {/* <h2>details</h2> */}\r\n       <Details \r\n         status={show.status}\r\n         network={show.network}\r\n         premiered={show.premiered}\r\n       />\r\n     </div>\r\n     <div>\r\n       <Seasons \r\n       seasons={show._embedded.seasons}\r\n       />\r\n       {console.log(show._embedded.seasons)}\r\n\r\n     </div>\r\n     <div>\r\n       <Cast \r\n       cast={show._embedded.cast}\r\n       />\r\n      \r\n     </div>\r\n     \r\n   </>\r\n\r\n )\r\n};\r\nexport default Show;"]},"metadata":{},"sourceType":"module"}