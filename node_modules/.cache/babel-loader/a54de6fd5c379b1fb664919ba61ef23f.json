{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useEffect, useReducer, useState } from 'react';\n\nfunction showsReducer(prevState, action) {\n  switch (action.type) {\n    case 'ADD':\n      return [...prevState, action.showId];\n\n    case 'REMOVE':\n      return [prevState.filter(showId => showId !== action.showId)];\n\n    default:\n      return prevState;\n  }\n}\n\nfunction usePresistedReducer(reducer, initialState, key) {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialState, initial => {\n    //the 3rd parameter passed to useReducer is a callback function to set the initial value or initial State \n    const presisited = localStorage.getItem(key);\n    return presisited ? JSON.parse(presisited) : initial; //look into local storage  for any array named as key if it does set it as initial value \n  });\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(state));\n  }, [state, key]);\n  console.log(state);\n  return [state, dispatch];\n}\n\n_s(usePresistedReducer, \"gZZ3TaNWFnk5pxLxmdKGLDXNo7Y=\");\n\nexport function useShows() {\n  _s2();\n\n  let key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'shows';\n  return usePresistedReducer(showsReducer, [], key);\n}\n\n_s2(useShows, \"VIN1wikLJQem5mgBXar3lrha1/E=\", false, function () {\n  return [usePresistedReducer];\n});\n\nexport function useLastQuery() {\n  _s3();\n\n  let key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'lastQuery';\n  const [input, setInput] = useState(() => {\n    const presisitedInput = sessionStorage.getItem(key);\n    return presisitedInput ? JSON.parse(presisitedInput) : \"\";\n  }); //this initial callback function takes an array named lastQuery from  session Storage and set it as input as the value of the search bar is  input the value we get from lastQuery is set as the value in search bar \n\n  const setPersistedInput = newState => {\n    setInput(newState);\n    sessionStorage.setItem(key, JSON.stringify(newState));\n  }; //setPersisitedInput is setinput in Home.jsx the newState  we recive is e.target.value in onInputChange function \n\n\n  return [input, setPersistedInput];\n}\n\n_s3(useLastQuery, \"0L2V4mddw6sps3SOWzIRAx/QHQQ=\");","map":{"version":3,"sources":["C:/Users/pt/Desktop/React Projects/Movie App/src/Components/misc/CustomHook.jsx"],"names":["useEffect","useReducer","useState","showsReducer","prevState","action","type","showId","filter","usePresistedReducer","reducer","initialState","key","state","dispatch","initial","presisited","localStorage","getItem","JSON","parse","setItem","stringify","console","log","useShows","useLastQuery","input","setInput","presisitedInput","sessionStorage","setPersistedInput","newState"],"mappings":";;;;AAAA,SAAQA,SAAR,EAAmBC,UAAnB,EAA8BC,QAA9B,QAA6C,OAA7C;;AAGA,SAASC,YAAT,CAAsBC,SAAtB,EAAgCC,MAAhC,EAAuC;AACnC,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,KAAL;AACI,aAAM,CAAC,GAAGF,SAAJ,EAAcC,MAAM,CAACE,MAArB,CAAN;;AAEJ,SAAK,QAAL;AACI,aAAM,CAACH,SAAS,CAACI,MAAV,CAAkBD,MAAD,IAAUA,MAAM,KAAGF,MAAM,CAACE,MAA3C,CAAD,CAAN;;AAEJ;AACI,aAAOH,SAAP;AARR;AAUH;;AAED,SAASK,mBAAT,CAA6BC,OAA7B,EAAqCC,YAArC,EAAkDC,GAAlD,EAAsD;AAAA;;AACpD,QAAK,CAACC,KAAD,EAAOC,QAAP,IAAmBb,UAAU,CAACS,OAAD,EAASC,YAAT,EAAuBI,OAAD,IAAW;AAC/D;AACA,UAAMC,UAAU,GAACC,YAAY,CAACC,OAAb,CAAqBN,GAArB,CAAjB;AACA,WAAOI,UAAU,GAACG,IAAI,CAACC,KAAL,CAAWJ,UAAX,CAAD,GAAwBD,OAAzC,CAH+D,CAI/D;AACH,GALiC,CAAlC;AAMAf,EAAAA,SAAS,CAAC,MAAI;AACZiB,IAAAA,YAAY,CAACI,OAAb,CAAqBT,GAArB,EAAyBO,IAAI,CAACG,SAAL,CAAeT,KAAf,CAAzB;AACD,GAFQ,EAEP,CAACA,KAAD,EAAOD,GAAP,CAFO,CAAT;AAGAW,EAAAA,OAAO,CAACC,GAAR,CAAYX,KAAZ;AACA,SAAM,CAACA,KAAD,EAAOC,QAAP,CAAN;AACD;;GAZQL,mB;;AAcT,OAAO,SAASgB,QAAT,GAA8B;AAAA;;AAAA,MAAZb,GAAY,uEAAR,OAAQ;AACjC,SAAOH,mBAAmB,CAACN,YAAD,EAAc,EAAd,EAAiBS,GAAjB,CAA1B;AACH;;IAFea,Q;UACLhB,mB;;;AAMX,OAAO,SAASiB,YAAT,GAAsC;AAAA;;AAAA,MAAhBd,GAAgB,uEAAZ,WAAY;AACzC,QAAM,CAACe,KAAD,EAAQC,QAAR,IAAkB1B,QAAQ,CAAC,MAAI;AACjC,UAAM2B,eAAe,GAACC,cAAc,CAACZ,OAAf,CAAuBN,GAAvB,CAAtB;AACA,WAAOiB,eAAe,GAAEV,IAAI,CAACC,KAAL,CAAWS,eAAX,CAAF,GAA8B,EAApD;AACH,GAH+B,CAAhC,CADyC,CAKzC;;AAEA,QAAME,iBAAiB,GAAEC,QAAD,IAAY;AAChCJ,IAAAA,QAAQ,CAACI,QAAD,CAAR;AACAF,IAAAA,cAAc,CAACT,OAAf,CAAuBT,GAAvB,EAA2BO,IAAI,CAACG,SAAL,CAAeU,QAAf,CAA3B;AACH,GAHD,CAPyC,CAYzC;;;AACA,SAAO,CAACL,KAAD,EAAQI,iBAAR,CAAP;AACH;;IAdeL,Y","sourcesContent":["import {useEffect, useReducer,useState} from 'react'\r\n\r\n\r\nfunction showsReducer(prevState,action){\r\n    switch(action.type){\r\n        case 'ADD':\r\n            return[...prevState,action.showId]\r\n           \r\n        case 'REMOVE':\r\n            return[prevState.filter((showId)=>showId!==action.showId)]\r\n        \r\n        default:\r\n            return prevState\r\n    }\r\n}\r\n\r\nfunction usePresistedReducer(reducer,initialState,key){\r\n  const[state,dispatch] = useReducer(reducer,initialState,(initial)=>{\r\n      //the 3rd parameter passed to useReducer is a callback function to set the initial value or initial State \r\n      const presisited=localStorage.getItem(key);\r\n      return presisited?JSON.parse(presisited):initial;\r\n      //look into local storage  for any array named as key if it does set it as initial value \r\n  })\r\n  useEffect(()=>{\r\n    localStorage.setItem(key,JSON.stringify(state))\r\n  },[state,key])\r\n  console.log(state)\r\n  return[state,dispatch];\r\n}\r\n\r\nexport function useShows(key='shows'){\r\n    return usePresistedReducer(showsReducer,[],key)\r\n}\r\n\r\n\r\n\r\n\r\nexport function useLastQuery(key='lastQuery'){\r\n    const [input ,setInput]=useState(()=>{\r\n        const presisitedInput=sessionStorage.getItem(key)\r\n        return presisitedInput? JSON.parse(presisitedInput):\"\";\r\n    })\r\n    //this initial callback function takes an array named lastQuery from  session Storage and set it as input as the value of the search bar is  input the value we get from lastQuery is set as the value in search bar \r\n\r\n    const setPersistedInput=(newState)=>{\r\n        setInput(newState);\r\n        sessionStorage.setItem(key,JSON.stringify(newState));\r\n    }\r\n\r\n    //setPersisitedInput is setinput in Home.jsx the newState  we recive is e.target.value in onInputChange function \r\n    return [input ,setPersistedInput]\r\n}"]},"metadata":{},"sourceType":"module"}