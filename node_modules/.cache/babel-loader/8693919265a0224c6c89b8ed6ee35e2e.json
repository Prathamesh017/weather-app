{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pt\\\\Desktop\\\\React Projects\\\\Movie App\\\\src\\\\Components\\\\Stared.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport MainPage from \"./MainPage\"; // import {useShows} from \"./misc/CustomHooks\"\n\nimport { useShows } from './misc/CustomHook';\nimport { apiGet } from '../misc/Config';\nimport ShowGrid from './Shows/ShowGrid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Stared = () => {\n  _s();\n\n  const [starred] = useShows();\n  console.log(starred);\n  console.log(typeof starred);\n  console.log(starred.length);\n  const [show, setShow] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    if (starred && starred.length > 0) {\n      const promises = starred.map(showId => apiGet(`shows/${showId}`));\n      Promise.all(promises).then(apiData => apiData.map(show => ({\n        show\n      }))) //as when we get data from apiGet(search/shows?=q=f) we get an object with an obj named show init so to keep the format same we need  to name each obj in results as shows\n      //results =[\n      // show:{....}\n      // show:{....}\n      // ]\n      .then(results => {\n        console.log(results);\n        setShow(results);\n        setIsLoading(false);\n        setError(null);\n      }).catch(err => {\n        setError(err.message);\n        setIsLoading(false);\n      });\n    }\n  }, [starred]);\n  console.log(show);\n  return /*#__PURE__*/_jsxDEV(MainPage, {\n    children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"data is loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 20\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"error has occured :\", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 15\n    }, this), !isLoading && !show && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"no shows Starred\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 29\n    }, this), !isLoading && !error && show && /*#__PURE__*/_jsxDEV(ShowGrid, {\n      data: show\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 38\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Stared, \"Xxst++ivNmZnAqHXzYhfffOVHv8=\", false, function () {\n  return [useShows];\n});\n\n_c = Stared;\nexport default Stared;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stared\");","map":{"version":3,"sources":["C:/Users/pt/Desktop/React Projects/Movie App/src/Components/Stared.jsx"],"names":["React","useEffect","useState","MainPage","useShows","apiGet","ShowGrid","Stared","starred","console","log","length","show","setShow","isLoading","setIsLoading","error","setError","promises","map","showId","Promise","all","then","apiData","results","catch","err","message"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CACA;;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAAQC,MAAR,QAAqB,gBAArB;AACA,OAAOC,QAAP,MAAqB,kBAArB;;;AAEA,MAAMC,MAAM,GAAC,MAAK;AAAA;;AAEd,QAAM,CAACC,OAAD,IAAUJ,QAAQ,EAAxB;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAOF,OAAnB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACG,MAApB;AAEA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAgBX,QAAQ,CAAC,IAAD,CAA9B;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA0Bb,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACc,KAAD,EAAQC,QAAR,IAAkBf,QAAQ,CAAC,IAAD,CAAhC;AAGAD,EAAAA,SAAS,CAAC,MAAI;AACV,QAAGO,OAAO,IAAIA,OAAO,CAACG,MAAR,GAAgB,CAA9B,EAAgC;AAC5B,YAAMO,QAAQ,GAACV,OAAO,CAACW,GAAR,CAAYC,MAAM,IAAEf,MAAM,CAAE,SAAQe,MAAO,EAAjB,CAA1B,CAAf;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ,EACCK,IADD,CACMC,OAAO,IAAEA,OAAO,CAACL,GAAR,CAAYP,IAAI,KAAG;AAACA,QAAAA;AAAD,OAAH,CAAhB,CADf,EAEA;AACA;AACA;AACA;AACA;AANA,OAOCW,IAPD,CAOME,OAAO,IAAE;AACXhB,QAAAA,OAAO,CAACC,GAAR,CAAYe,OAAZ;AACAZ,QAAAA,OAAO,CAACY,OAAD,CAAP;AACAV,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,OAZD,EAaCS,KAbD,CAaOC,GAAG,IAAE;AACRV,QAAAA,QAAQ,CAACU,GAAG,CAACC,OAAL,CAAR;AACAb,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,OAhBD;AAiBH;AAEJ,GAtBQ,EAsBP,CAACP,OAAD,CAtBO,CAAT;AAuBAC,EAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ;AACA,sBAAO,QAAC,QAAD;AAAA,eACNE,SAAS,iBAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADR,EAENE,KAAK,iBAAI;AAAA,wCAAyBA,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFH,EAGN,CAACF,SAAD,IAAc,CAACF,IAAf,iBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHjB,EAIN,CAACE,SAAD,IAAc,CAACE,KAAf,IAAwBJ,IAAxB,iBAAgC,QAAC,QAAD;AAAU,MAAA,IAAI,EAAEA;AAAhB;AAAA;AAAA;AAAA;AAAA,YAJ1B;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAMH,CA1CD;;GAAML,M;UAEcH,Q;;;KAFdG,M;AA4CN,eAAeA,MAAf","sourcesContent":["import React, { useEffect ,useState } from 'react'\r\nimport MainPage from \"./MainPage\"\r\n// import {useShows} from \"./misc/CustomHooks\"\r\nimport { useShows } from './misc/CustomHook'\r\nimport {apiGet} from '../misc/Config'\r\nimport ShowGrid from './Shows/ShowGrid'\r\n\r\nconst Stared=() =>{\r\n\r\n    const [starred]=useShows();\r\n    console.log(starred)\r\n    console.log(typeof(starred))\r\n    console.log(starred.length)\r\n\r\n    const [show ,setShow]=useState(null);\r\n    const [isLoading ,setIsLoading]=useState(true);\r\n    const [error ,setError]=useState(null);\r\n\r\n\r\n    useEffect(()=>{\r\n        if(starred && starred.length >0){\r\n            const promises=starred.map(showId=>apiGet(`shows/${showId}`))\r\n            Promise.all(promises)\r\n            .then(apiData=>apiData.map(show=>({show})))\r\n            //as when we get data from apiGet(search/shows?=q=f) we get an object with an obj named show init so to keep the format same we need  to name each obj in results as shows\r\n            //results =[\r\n            // show:{....}\r\n            // show:{....}\r\n            // ]\r\n            .then(results=>{\r\n                console.log(results)\r\n                setShow(results)\r\n                setIsLoading(false)\r\n                setError(null)\r\n            })\r\n            .catch(err=>{\r\n                setError(err.message)\r\n                setIsLoading(false);\r\n            })\r\n        }\r\n        \r\n    },[starred])\r\n    console.log(show)\r\n    return <MainPage>\r\n    {isLoading &&  <div>data is loading</div>}\r\n    {error && <div>error has occured :{error}</div>}\r\n    {!isLoading && !show && <div>no shows Starred</div>}\r\n    {!isLoading && !error && show && <ShowGrid data={show}/>}\r\n    </MainPage>\r\n}\r\n\r\nexport default Stared"]},"metadata":{},"sourceType":"module"}